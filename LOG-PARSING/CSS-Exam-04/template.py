#!/usr/bin/env python3
import sys
import json
import argparse
import re
from datetime import datetime

def headers_to_dict(headers_str):
    headers_dict = {}
    for header_line in headers_str.split("\n"):
        parts = header_line.split(":", 1)
        if len(parts) == 2:
            key, value = parts
            if key in headers_dict:
                headers_dict[key].append(value.strip())
            else:
                headers_dict[key] = [value.strip()]
    return headers_dict

def process_logs(access_file, forensics_file):
    # Read and parse log files
    with open(forensics_file, 'r') as file:
        forensics_data = [json.loads(line) for line in file.readlines()]

    # Index forensics data by requestId for faster lookup
    forensics_indexed = {item["requestId"]: item for item in forensics_data}

    # Extract data from access.log using regex
    access_log_pattern = re.compile(
        r'(?P<requestId>\S+) (?P<remoteAddress>\S+) \S+ \S+ \[(?P<timestamp>.+?)\] "(?P<method>\S+)? (?P<url>.+?)? (?P<version>.+?)?" (?P<responseCode>\d+)? (?P<responseSize>\S+)?'
    )

    with open(access_file, 'r') as access:
        # Process access log file
        for line in access:
            try:
                log_entry = re.match(access_log_pattern, line).groupdict()
                matched_forensics = forensics_indexed.get(log_entry["requestId"])
                
                if matched_forensics:
                    # Convert timestamp to ISO 8601 format
                    timestamp = datetime.strptime(log_entry["timestamp"], "%d/%m/%Y:%H:%M:%S %z").isoformat()

                    combined_entry = {
                        "requestId": log_entry["requestId"],
                        "remoteAddress": log_entry["remoteAddress"],
                        "timestamp": timestamp,
                        "method": log_entry.get("method", ""),
                        "url": log_entry.get("url", ""),
                        "version": log_entry.get("version", ""),
                        "responseCode": int(log_entry.get("responseCode", 0)),
                        "responseSize": int(log_entry.get("responseSize", 0) if log_entry.get("responseSize", "").isdigit() else 0),
                        "requestHeaders": headers_to_dict(matched_forensics["headers"])
                    }
                    
                    print(json.dumps(combined_entry))
            except Exception as e:
                print("Error {} on line {}".format(e, line), file=sys.stderr)
                sys.exit(1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process web application log files.')
    parser.add_argument('-a', '--access', help='the acces log file to parse', default='access.log')
    parser.add_argument('-f', '--forensics', help='the forensics log file to parse', default='forensics.json')

    args = parser.parse_args()

    process_logs(args.access, args.forensics)