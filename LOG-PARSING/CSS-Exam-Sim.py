"""
Author      : Alessandro Salucci
Date        : 2023-09-06

Title       : CSS-Exam-Sim.py

Description : 2022 Challenge #5 Programming in Python
    
    - Verify integrity of log file using MD5 checksum.
    - Read and count the occurrence of every status code in the log file.
    - Handle file reading errors gracefully.
    - Create ordered list of status codes and their counts.
    - Write the results into a YAML file.
    - Generate a pie chart showing the distribution of status codes.
"""

# Import necessary libraries
import sys
import hashlib
from collections import Counter
import re
import yaml
import matplotlib.pyplot as plt

def calculate_md5(file_path):
    """
    Calculate and return the MD5 checksum of the provided file.
    """
    hasher = hashlib.md5()
    # Open the file in binary mode and read chunks
    with open(file_path, 'rb') as file:
        for chunk in iter(lambda: file.read(4096), b""):
            hasher.update(chunk)
    return hasher.hexdigest()

def extract_status_codes(file_path):
    """
    Extract and return a list of HTTP status codes from the provided log file.
    """
    try:
        # Open the file and read its contents
        with open(file_path, 'r') as file:
            log_content = file.readlines()
    except Exception as e:
        # If there's an error reading the file, print an error message and exit
        print(f"Error reading the file: {e}")
        sys.exit(1)

    # Use a regular expression to find all the status codes in the log
    pattern = r'\" \d{3} '
    status_codes = [int(re.search(pattern, line).group().strip()[1:]) for line in log_content if re.search(pattern, line)]
    return status_codes

def write_to_yaml(data, output_file):
    """
    Write the provided data to a YAML file.
    """
    with open(output_file, 'w') as file:
        yaml.dump(data, file)

def generate_pie_chart(data):
    """
    Generate a pie chart showing the distribution of status codes.
    """
    labels = [str(key) for key in data.keys()]
    sizes = [value for value in data.values()]

    fig1, ax1 = plt.subplots()
    ax1.pie(sizes, labels=labels, autopct=lambda p: '{:.2f}%'.format(p))
    ax1.axis('equal')  # Ensure the pie chart is circular
    plt.title("Distribution of HTTP Status Codes")
    plt.savefig("/home/anyguy/Downloads/SIM-TEST-CYBER-SEC/HackingLab/05/statuscode.png")

def main(log_file_path):
    """
    Main function to orchestrate the script's operations.
    """
    # Verify the integrity of the file using MD5
    checksum = calculate_md5(log_file_path)
    if checksum != "f835044521c653a1fca956fbde72dd02":
        return "MD5 checksum mismatch. File integrity verification failed."

    # Extract the status codes from the log file and count their occurrences
    status_codes = extract_status_codes(log_file_path)
    counter = Counter(status_codes)
    
    # Write the results to a YAML file
    ordered_data = dict(sorted(counter.items()))
    write_to_yaml(ordered_data, "/home/anyguy/Downloads/SIM-TEST-CYBER-SEC/HackingLab/05/results.yml")

    # Generate a pie chart
    generate_pie_chart(ordered_data)

    return "Processing completed. Check results.yml and statuscode.png."

if __name__ == '__main__':
    # Ensure the script was called with a file argument
    if len(sys.argv) < 2:
        print("Please provide the path to the log file as an argument.")
        sys.exit(1)
    else:
        log_file_path = sys.argv[1]
        print(main(log_file_path))