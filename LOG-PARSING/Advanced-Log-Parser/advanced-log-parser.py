"""
Author      : AnyGuy
Date        : 2023-09-04

Title       : advanced-log-parser.py

Description : Here comes text
    
    - xy
    - xy
    - xy

"""

# Import Libraries
import json
import re
from datetime import datetime

# Convert headers from string to dictionary of lists
def headers_to_dict(headers_str):
    headers_dict = {}
    for header_line in headers_str.split("\n"):
        parts = header_line.split(":", 1)
        if len(parts) == 2:
            key, value = parts
            if key in headers_dict:
                headers_dict[key].append(value.strip())
            else:
                headers_dict[key] = [value.strip()]
    return headers_dict

# Read and parse log files
access_log_filename = input("Please enter the path to the access.log file: ")
forensics_filename = input("Please enter the path to the forensics.json file: ")

with open(access_log_filename, "r") as file:
    access_log_lines = file.readlines()

with open(forensics_filename, "r") as file:
    forensics_lines = file.readlines()

# Extract data from access.log using regex
access_log_pattern = re.compile(
    r'(?P<requestId>\S+) (?P<remoteAddress>\S+) \S+ \S+ \[(?P<timestamp>.+?)\] "(?P<method>\S+)? (?P<url>.+?)? (?P<version>.+?)?" (?P<responseCode>\d+)? (?P<responseSize>\S+)?'
)
access_log_data = [re.match(access_log_pattern, line).groupdict() for line in access_log_lines]

forensics_data = [json.loads(line) for line in forensics_lines]

# Index forensics data by requestId for faster lookup
forensics_indexed = {item["requestId"]: item for item in forensics_data}

# Prepare the combined data with efficient matching
combined_data = []

for log_entry in access_log_data:
    matched_forensics = forensics_indexed.get(log_entry["requestId"])
    if matched_forensics:
        # Convert timestamp to ISO 8601 format
        timestamp = datetime.strptime(log_entry["timestamp"], "%d/%m/%Y:%H:%M:%S %z").isoformat()
        
        combined_entry = {
            "requestId": log_entry["requestId"],
            "remoteAddress": log_entry["remoteAddress"],
            "timestamp": timestamp,
            "method": log_entry.get("method", ""),
            "url": log_entry.get("url", ""),
            "version": log_entry.get("version", ""),
            "responseCode": int(log_entry.get("responseCode", 0)),
            "responseSize": int(log_entry.get("responseSize", 0) if log_entry.get("responseSize", "").isdigit() else 0),
            "requestHeaders": headers_to_dict(matched_forensics["headers"])
        }
        combined_data.append(combined_entry)

# Write the combined data to output.json
output_filename = input("Please enter the desired output filename (default is output.json): ") or "output.json"

with open(output_filename, "w") as outfile:
    for entry in combined_data:
        json.dump(entry, outfile)
        outfile.write("\n")

print(f"Data has been written to {output_filename}.")