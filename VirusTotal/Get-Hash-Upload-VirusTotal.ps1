"
Author      : AnyGuy
Date        : 2023-08-17

Title       : Get-Hash-Upload-VirusTotal.ps1

Description : Gathering hash values from files and Upload the Hash value to VirusTotal
    
    - Hash Values SHA256
    - VirusTotal API
"

# Path to the API-Key file | Replace "-Path {Your-Location-of-the-file}" with your VirusTotal API key file // File data must be: API_KEY={Your-API-Key}
$apiKey = Get-Content -Path "D:\002_PROJECT\Code\VirusTotal\readme.txt" | Select-String -Pattern "^API_KEY=" | ForEach-Object { $_.ToString().Substring(8) }

# Banner
$banner = @"

         ██████╗ ███████╗████████╗    ██╗  ██╗ █████╗ ███████╗██╗  ██╗          
        ██╔════╝ ██╔════╝╚══██╔══╝    ██║  ██║██╔══██╗██╔════╝██║  ██║          
        ██║  ███╗█████╗     ██║       ███████║███████║███████╗███████║          
        ██║   ██║██╔══╝     ██║       ██╔══██║██╔══██║╚════██║██╔══██║          
        ╚██████╔╝███████╗   ██║       ██║  ██║██║  ██║███████║██║  ██║          
         ╚═════╝ ╚══════╝   ╚═╝       ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝          
                                                                                
██╗   ██╗██╗██████╗ ██╗   ██╗███████╗████████╗ ██████╗ ████████╗ █████╗ ██╗     
██║   ██║██║██╔══██╗██║   ██║██╔════╝╚══██╔══╝██╔═══██╗╚══██╔══╝██╔══██╗██║     
██║   ██║██║██████╔╝██║   ██║███████╗   ██║   ██║   ██║   ██║   ███████║██║     
╚██╗ ██╔╝██║██╔══██╗██║   ██║╚════██║   ██║   ██║   ██║   ██║   ██╔══██║██║     
 ╚████╔╝ ██║██║  ██║╚██████╔╝███████║   ██║   ╚██████╔╝   ██║   ██║  ██║███████╗
  ╚═══╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝    ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝
                                                                                
                             █████╗ ██████╗ ██╗                                 
                            ██╔══██╗██╔══██╗██║                                 
                            ███████║██████╔╝██║                                 
                            ██╔══██║██╔═══╝ ██║                                 
                            ██║  ██║██║     ██║                                 
                            ╚═╝  ╚═╝╚═╝     ╚═╝  by AnyGuy v1.0 / 17.08.2023                               
                                                                                
"@

$banner -split "`n" | ForEach-Object {
    Write-Output $_
    Start-Sleep -Milliseconds 300
}
Write-Output "" 

# Function CustomeWrite to Terminal in Color or File
function CustomWrite {
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message,

        [Parameter(Mandatory = $false)]
        [ConsoleColor]$Color
    )

    if ($host.Name -eq "ConsoleHost") {
        if ($Color) {
            Write-Host $Message -ForegroundColor $Color
        }
        else {
            Write-Host $Message
        }
    }
    else {
        Write-Output $Message
    }
}

# Function to send the hash to VirusTotal
function SendToVirusTotal($hash) {
    $url = "https://www.virustotal.com/api/v3/files/$hash"
    $headers = @{}
    $headers.Add("accept", "application/json")
    $headers.Add("x-apikey", "$apiKey")

    try {
        $response = Invoke-RestMethod -Uri $url -Method 'GET' -Headers $headers
        return $response
    }
    catch {
        return $_.Exception.Message
    }
}

# Ask for the directory path if not provided as a parameter
if (-not $o) {
    $o = Read-Host "Please input the path to the directory"
    Write-Output ""
    Write-Output ""
}

# Iterate through the specified folder
# Iterate through the specified folder
Get-ChildItem -Path $o -Recurse -File | ForEach-Object {
    $fileHash = Get-FileHash -Path $_.FullName -Algorithm SHA256
    $vtResult = SendToVirusTotal($fileHash.Hash)

    # Interpret Reputation and display file name accordingly
    if ($vtResult.data.attributes.reputation) { 
        $reputation = $vtResult.data.attributes.reputation
        if ($reputation -gt 0) {
            $reputationStatus = "Harmless"
            CustomWrite -Message ("############### [ " + $_.Name + " ] #################") -Color Green
        }
        elseif ($reputation -lt 0) {
            $reputationStatus = "Malicious"
            CustomWrite -Message ("############### [ " + $_.Name + " ] #################") -Color Red
        }
        else {
            $reputationStatus = "Neutral"
            CustomWrite -Message ("############### [ " + $_.Name + " ] #################") -Color Yellow
        }
    }
    else {
        # Display the file name in white if there's no reputation data
        CustomWrite -Message ("############### [ " + $_.Name + " ] #################")
    }

    Write-Output ""
    Write-Output ("File name: " + $_.Name)
    Write-Output ("Path: " + $_.FullName)
    Write-Output ("SHA256: " + $fileHash.Hash)
    Write-Output ""
    Write-Output ("VirusTotal Report Link: https://www.virustotal.com/gui/file/" + $fileHash.Hash + "/detection")
    Write-Output ""

    $vtResult = SendToVirusTotal($fileHash.Hash)

    # Check if the result contains an error message
    if ($vtResult -is [string]) {
        Write-Output "------------FILE DETAILS--------------"
        Write-Output ""
        Write-Output ("Error: FILE NOT FOUND ON VIRUSTOTAL - " + $vtResult)
        Write-Output ""
        Write-Output "--------------------------------------"
    }
    else {
        Write-Output "------------FILE DETAILS--------------"
        Write-Output ""

        # Display each field only if it exists in the response
        if ($vtResult.data.attributes.id) { Write-Output ("File ID: " + $vtResult.data.attributes.id) }
        if ($vtResult.data.attributes.md5) { Write-Output ("File MD5: " + $vtResult.data.attributes.md5) }
        if ($vtResult.data.attributes.sha1) { Write-Output ("File SHA1: " + $vtResult.data.attributes.sha1) }
        if ($vtResult.data.attributes.type_description) { Write-Output ("File Type: " + $vtResult.data.attributes.type_description) }
        if ($vtResult.data.attributes.size) { Write-Output ("File Size: " + $vtResult.data.attributes.size + " bytes") }

        if ($vtResult.data.attributes.first_submission_date) { 
            Write-Output ("First Submission Date: " + [System.DateTimeOffset]::FromUnixTimeSeconds($vtResult.data.attributes.first_submission_date).DateTime) 
        }

        if ($vtResult.data.attributes.last_analysis_date) {
            Write-Output ("Last Analysis Date: " + [System.DateTimeOffset]::FromUnixTimeSeconds($vtResult.data.attributes.last_analysis_date).DateTime) 
        }

        if ($vtResult.data.attributes.times_submitted) { Write-Output ("Times Submitted: " + $vtResult.data.attributes.times_submitted) }
        if ($vtResult.data.attributes.reputation) { 
            # Interpret Reputation
            $reputation = $vtResult.data.attributes.reputation

            if ($reputation -gt 0) {
                $reputationStatus = "Harmless"
                CustomWrite -Message ("Reputation: " + $reputation + " (" + $reputationStatus + ")") -Color Green
            }
            elseif ($reputation -lt 0) {
                $reputationStatus = "Malicious"
                CustomWrite -Message ("Reputation: " + $reputation + " (" + $reputationStatus + ")") -Color Red
            }
            else {
                $reputationStatus = "Neutral"
                CustomWrite -Message ("Reputation: " + $reputation + " (" + $reputationStatus + ")") -Color Yellow
            }
        }

        if ($vtResult.data.attributes.names) {
            # Limit the number of file names to 10
            $limitedFileNames = $vtResult.data.attributes.names | Select-Object -First 10 
            $fileNamesList = $limitedFileNames -join "`n"
            Write-Output ""
            Write-Output "File Names: "
            Write-Output $fileNamesList
            Write-Output ""
        }

        # Additional fields from VirusTotal response
        if ($vtResult.data.attributes.last_modification_date) {
            Write-Output ("Last Modification Date: " + [System.DateTimeOffset]::FromUnixTimeSeconds($vtResult.data.attributes.last_modification_date).DateTime)
        }

        if ($vtResult.data.attributes.meaningful_name) { Write-Output ("Meaningful Name: " + $vtResult.data.attributes.meaningful_name) }
        if ($vtResult.data.attributes.type_tags) { Write-Output ("Type Tags: " + ($vtResult.data.attributes.type_tags -join ', ')) }
        if ($vtResult.data.attributes.unique_sources) { Write-Output ("Unique Sources: " + $vtResult.data.attributes.unique_sources) }
        # Add more fields as needed
        Write-Output ""
        Write-Output "--------------------------------------"
        Write-Output ""
        Write-Output ""
    }
}

