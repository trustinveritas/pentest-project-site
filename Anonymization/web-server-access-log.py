"""
Author      : AnyGuy
Date        : 2023-08-19

Title       : web-server-access-log.py

Description : Here comes text
    
    - xy
    - xy
    - xy

"""

# Import Libraries
import argparse
import os
import re
import sqlite3
import hashlib
from Crypto.Cipher import AES

# Load AES_KEY and AES_IV from files
def load_aes_keys():
    with open("aes_key.key", "rb") as key_file:
        AES_KEY = key_file.read()

    with open("aes_iv.iv", "rb") as iv_file:
        AES_IV = iv_file.read()

    return AES_KEY, AES_IV

AES_KEY, AES_IV = load_aes_keys()

def encrypt_data(data):
    cipher = AES.new(AES_KEY, AES.MODE_CBC, AES_IV)
    # Pad data to be multiple of 16
    padded_data = data + ' ' * (16 - len(data) % 16)
    encrypted_data = cipher.encrypt(padded_data.encode())
    return encrypted_data.hex()

def pseudo_anonymize(data):
    "Pseudo-anonymize the given data using SHA-256 hashing."
    return hashlib.sha256(data.encode()).hexdigest()

def anonymize_dob(dob):
    "Anonymize the date of birth by retaining only the year."
    return dob.split('-')[0]

def anonymize_db(input_db, output_folder):
    # Connect to the database
    conn = sqlite3.connect(input_db)
    cursor = conn.cursor()

    # Pseudo-anonymize the firstname and lastname columns and encrypt the cc_number
    cursor.execute("UPDATE customers SET firstname = ?, lastname = ?, cc_number = ?",
                   (pseudo_anonymize("firstname"), pseudo_anonymize("lastname"), encrypt_data("cc_number")))

    # Anonymize date_of_birth and set phone, email, cc_cvv, and cc_expire to empty strings
    cursor.execute("UPDATE customers SET date_of_birth = ?, phone = ?, email = ?, cc_cvv = ?, cc_expire = ?",
                   (anonymize_dob("date_of_birth"), "", "", "", ""))

    conn.commit()
    conn.close()

    # Save the anonymized database to the output folder
    output_db_path = os.path.join(output_folder, os.path.basename(input_db))
    os.rename(input_db, output_db_path)

def main():
    parser = argparse.ArgumentParser(description="Anonymize customer data and access logs.")
    parser.add_argument("-i", "--input", nargs='+', help="Input files to be anonymized.")
    parser.add_argument("-o", "--output", help="Output folder to save anonymized files.")
    args = parser.parse_args()

    if not args.input:
        db_path = input("Please provide the path to the customerdata.db file: ")
        log_path = input("Please provide the path to the access.log file: ")
        args.input = [db_path, log_path]

    if not args.output:
        args.output = input("Please provide the output folder path: ")

    for input_file in args.input:
        if "customerdata.db" in input_file:
            anonymize_db(input_file, args.output)
        elif "access.log" in input_file:
            anonymize_log(input_file, args.output)

if __name__ == "__main__":
    main()
