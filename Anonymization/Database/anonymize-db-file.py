"""
Author      : AnyGuy
Date        : 2023-09-02

Title       : anonymize-db-file.py

Description : Here comes text
    
    - pip3 install sqlite3 pandas

"""

"""
.TASK

    First names: Keep the first character of the first name and replace any further characters by exactly 9 asterisks (*). Example: "Mike" is changed to "M*********"

    Last names: Replace all last names with a random number of 10 digits.

    Date of birth: Reduce the date to the year. Example: 01.01.1999 is changed to 1999 only.

    Salary: Reduce the precision of data by replacing the salary with the correct category according the following rules:
    	
    low:	salaries less than 50k
    medium:	salaries from exactly 50k to less than 100k
    high:	salaries from exactly 100k and upwards

    Remove all usernames, password hashes and the VIP status.

"""

# Import Libraries
import sqlite3
import random
import pandas as pd

#######################################
############# CHANGE HERE #############
#######################################
# Example: def anonymize_birth_date(birth_date):
#            return birth_date.split('-')[0]

def anonymize_salutation(salutation):
    if salutation is None:
        return None
    return salutation

def anonymize_first_name(first_name): # First names: Keep the first character of the first name and replace any further characters by exactly 9 asterisks (*). Example: "Mike" is changed to "M*********"
    if first_name is None:
        return None
    return first_name[0] + "*" * 9

def anonymize_last_name(last_name): # Last names: Replace all last names with a random number of 10 digits.
    if last_name is None:
        return None
    return str(random.randint(1000000000, 9999999999))

def anonymize_dob(date_of_birth): # Date of birth: Reduce the date to the year. Example: 01.01.1999 is changed to 1999 only.
    return date_of_birth.split('-')[0]

def categorize_salary(salary): # Salary: Reduce the precision of data by replacing the salary with the correct category according the following rules:
    if salary is None:
        return None
    elif salary < 50000:
        return "low"
    elif salary < 100000:
        return "medium"
    else:
        return "high"
    
def main():
    db_path = input("Please provide the path to the database file: ")
    output_path = input("Please specify the location for the output: ")
    output_format = input("Please specify the desired output format (xlsx, csv, json, db): ")

    # Connect to the database
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    #######################################
    ############# CHANGE HERE #############
    #######################################
    # Perform anonymization
    cursor.execute("SELECT id, salutation, first_name, last_name, date_of_birth, salary FROM t_person") # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE
    # Example: cursor.execute("SELECT first_name, last_name, birth_date, wage FROM employees")
    data = cursor.fetchall()

    anonymized_data = []

    #######################################
    ############# CHANGE HERE #############
    #######################################
    # Add all rows from the database !
    for row in data:
        id_val = row[0]
        salutation = row[1]
        anon_first_name = anonymize_first_name(row[2]) # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE (e.g., row[0])
        anon_last_name = anonymize_last_name(row[3]) # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE (e.g., row[1])
        anon_dob = anonymize_dob(row[4]) # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE (e.g., row[2])
        anon_salary = categorize_salary(row[5]) # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE (e.g., row[3])

        # CHANGE HERE IF YOU HAVE DIFFERENT COLUMNS INSIDE YOUR TABLE (e.g., anonymized_data.append((anon_first_name, anon_last_name, anon_dob, anon_salary)))
        anonymized_data.append((id_val, salutation, anon_first_name, anon_last_name, anon_dob, anon_salary))

    # Show a sample record for confirmation
    print("Sample of an anonymized record:")
    print(anonymized_data[0])

    confirmation = input("Do you agree with the anonymization? (Y = Yes, N = No): ")
    if confirmation.lower() != 'y':
        print("Anonymization aborted!")
        return

    #######################################
    ############# CHANGE HERE #############
    #######################################
    # Save the dataset in the desired format
    df = pd.DataFrame(anonymized_data, columns=["id", "salutatioN", "First Name", "Last Name", "Date of Birth", "Salary"])
    # Example: df = pd.DataFrame(anonymized_data, columns=["FirstName", "LastName", "DOB", "Wage"])
    if output_format == "xlsx":
        if output_path.endswith('/'):
            output_path += "anonymized-data.xlsx"
        df.to_excel(output_path, index=False)
    
    elif output_format == "csv":
        if output_path.endswith('/'):
            output_path += "anonymized-data.csv"
        df.to_csv(output_path, index=False)
    
    elif output_format == "json":
        if output_path.endswith('/'):
            output_path += "anonymized-data.json"
        df.to_json(output_path)

    elif output_format == "db":
        if output_path.endswith('/'):
            output_path += "anonymized-data.db"
        new_conn = sqlite3.connect(output_path)
        df.to_sql('anonymized_users', new_conn, index=False, if_exists='replace')

    print("Anonymized data successfully saved!")

if __name__ == "__main__":
    main()
