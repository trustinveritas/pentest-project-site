"""
Author      : AnyGuy
Date        : 2023-09-02

Title       : V2-anonymize-db-file.py

Description : 
    This script facilitates the anonymization of data in a SQLite database. It prompts the user 
    for anonymization preferences for each column and then processes the database based on those choices. 
    The functionalities provided include the ability to:
    
    - Remove specific columns or data.
    - Reduce the precision of data (e.g., truncating dates or phone numbers).
    - Replace characters with placeholders or random numbers.
    - Hash sensitive data using SHA-256.
    - Preserve data integrity where anonymization is not required.

"""

# Import Libraries
import sqlite3
import hashlib
import random

COLORS = {
    "GREEN": "\033[92m",        # BRIGHT green
    "LIGHT_BLUE": "\033[94m",   # BRIGHT blue
    "ORANGE": "\033[93m",       # Orange
    "RED": "\033[91m",          # Red
    "BLUE": "\033[94m",         # Blue
    "ENDC": "\033[0m"           # Ends the colour
}

ACTIONS_COLOR_MAP = {
    "X": COLORS["GREEN"],
    "C": COLORS["LIGHT_BLUE"],
    "P": COLORS["ORANGE"],
    "E": COLORS["ORANGE"],
    "B": COLORS["ORANGE"],
    "A": COLORS["ORANGE"],
    "D": COLORS["ORANGE"],
    "R": COLORS["RED"],
    "S": COLORS["BLUE"]
}

def clean_input(prompt=""):
    return input(prompt).replace('\r', '')

def reduce_phone_number(phone):
    """Reduce phone number to keep only the first 2 blocks and the last block."""
    blocks = phone.split()
    if len(blocks) >= 3:
        return f"{blocks[0]} {blocks[1]} *** ** {blocks[-1]}"
    return phone

def reduce_email(email):
    """Reduce email to keep only the first and last characters before '@' and the domain."""
    parts = email.split('@')
    if len(parts) == 2:
        user, domain = parts
        if len(user) > 2:
            user = user[0] + '*' * (len(user) - 2) + user[-1]
        return f"{user}@{domain}"
    return email

def replace_characters(value, replace_char='*', specific_amount=None):
    """Replace the characters of the value with a given character."""
    if specific_amount:
        return replace_char * specific_amount
    return replace_char * len(value)

def reduce_cc_expire_date(date):
    """Reduce credit card expiration date to keep only the year."""
    parts = date.split('/')
    if len(parts) == 2:
        return f"**/{parts[1]}"
    return date

def compute_sha256(file_path):
    """Compute SHA256 hash value of a given file."""
    with open(file_path, 'rb') as f:
        data = f.read()
        return hashlib.sha256(data).hexdigest()

def pseudo_anonymize(data):
    """Pseudo-anonymize the given data using SHA-256 hashing."""
    if data is None:
        return None
    return hashlib.sha256(str(data).encode()).hexdigest()

def main():
    # 1. Query database path, output path and table name.
    db_path = clean_input("Please provide the path to the database file: ")
    original_hash = compute_sha256(db_path)
    output_folder = clean_input("Please specify the location for the output folder: ")
    table_name = clean_input("Please provide the table name: ")
    
    # Connect to the database and fetch column names
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    
    # 2. Query the desired anonymisation action for each column.
    actions = {}
    for col in columns:
        print(f"\nFor the column '{col}':")
        action = clean_input("""
        Choose an action:
        X - Do nothing
        R - Remove
        C - Replace characters with a specific character
        B - Reduce a date like birthday or registration date and keep only...
        P - Reduce Phone number and keep only the first 2 blocks and last block
        E - Reduce email address keeping only first and last characters before @ and domain
        N - Replace with random number  
        A - Reduce CC expire date and keep only year
        D - Reduce precision of values with (low, medium, high)
        S - Make SHA256Hash Value
        Please type your choice: 
        """).upper()
        
        if action == "N":
            digits = clean_input("How many digits for the random number? ")
            actions[col] = (action, digits)
        
        elif action == "B":
            birth_choice = clean_input("Choose date reduction, what do you want to keep? (day, month, year, day/month, day/year, month/year): ")
            actions[col] = (action, birth_choice)
        
        elif action == "C":
            keep_chars = int(clean_input("How many characters do you want to keep? "))
            replace_char = clean_input("With what should the rest be replaced (*, +, etc.)? ")
            specific_amount = clean_input("Do you want to replace it with a specific amount of characters (Y/N)? ").upper()
            if specific_amount == "Y":
                amount = int(clean_input("How many characters? "))
            else:
                amount = None
            actions[col] = (action, keep_chars, replace_char, amount)
        
        elif action == "P":
            replace_char_phone = clean_input("With what should the phone number be replaced (*, +, etc.)? ")
            actions[col] = (action, replace_char_phone)
        
        elif action == "D":
            precision_rules = {}
            while True:
                limit = clean_input("Provide a salary limit. Value of database LESS THEN [YOUR-VALUE] (or type 'done' to finish): ")
                if limit.lower() == "done":
                    break
                label = clean_input(f"What should be displayed for salaries < {limit}? ")
                precision_rules[int(limit)] = label
            actions[col] = (action, precision_rules)
        
        elif action in ["E", "A", "S"]:
            actions[col] = (action,)
        
        else:
            actions[col] = (action,)
    
    ACTIONS_DESCRIPTION = {
        "X": "Do nothing",
        "R": "Remove",
        "P": "Reduce Phone number",
        "E": "Reduce email address",
        "C": "Replace characters",
        "N": "Replace with random number",
        "B": "Reduce date by",
        "A": "Reduce CC expire date",
        "D": "Reduce precision",
        "S": "Make SHA256Hash Value"
    }

    print("\nAnonymization plan:")
    for col, action in actions.items():
        action_desc = ACTIONS_DESCRIPTION.get(action[0])
        additional_info = ' '.join(map(str, action[1:]))
        color = ACTIONS_COLOR_MAP.get(action[0], COLORS["ENDC"])
        print(f"{col}: {color}{action_desc}{COLORS['ENDC']} ({additional_info})")
    
    # Connect to the database and fetch the data
    cursor.execute(f"SELECT {', '.join(columns)} FROM {table_name}")
    data = cursor.fetchall()

    # Apply anonymization based on the action plan
    anonymized_data = apply_anonymization(data, actions, columns)

    # Save the anonymized data to a new database file
    output_path = f"{output_folder}{table_name}_anonymized.db"
    new_conn = sqlite3.connect(output_path)
    cursor_new = new_conn.cursor()
    cursor_new.execute(f"CREATE TABLE {table_name} ({', '.join(columns)})")
    cursor_new.executemany(f"INSERT INTO {table_name} VALUES ({','.join(['?'] * len(columns))})", anonymized_data)
    new_conn.commit()
    new_conn.close()

    after_hash = compute_sha256(db_path)
    anon_db_hash = compute_sha256(output_path)

    print ("")
    print("--------------------------------------------------------------")
    print(f"Anonymization completed successfully! Saved to {output_path}")
    print("--------------------------------------------------------------")
    print ("")
    print(f"{COLORS['GREEN']}ORG-DATBASE SHA265 Value: {original_hash}{COLORS['ENDC']}")
    print(f"{COLORS['GREEN']}AFTER SCRIPT RUN SHA256 Value: {after_hash}{COLORS['ENDC']}")
    print ("")
    print(f"{COLORS['BLUE']}ANONYMIZATION DATABASE SHA256 Value: {anon_db_hash}{COLORS['ENDC']}")

def apply_anonymization(data, actions, columns):
    anonymized_data = []
    for row in data:
        new_row = []
        for idx, col_name in enumerate(columns):
            value = row[idx]
            action = actions.get(col_name)
            if action:
                if action[0] == "X":
                    new_row.append(value)
                elif action[0] == "R":
                    new_row.append(None)
                elif action[0] == "N":
                    digits = int(action[1])
                    new_row.append(str(random.randint(10**(digits-1), 10**digits - 1)))
                elif action[0] == "B":
                    if value:
                        if action[1] == "year":
                            new_row.append(value.split('-')[0])
                        elif action[1] == "month":
                            new_row.append('-'.join(value.split('-')[:2]))
                        else:
                            new_row.append(value)
                    else:
                        new_row.append(None)
                elif action[0] == "P":
                    new_row.append(reduce_phone_number(value))
                elif action[0] == "E":
                    new_row.append(reduce_email(value))
                elif action[0] == "C":
                    if len(str(value)) > action[1]:
                        replace_with = action[2] * (action[3] if action[3] else len(value) - int(action[1]))
                        new_value = value[:int(action[1])] + replace_with
                        new_row.append(new_value)
                    else:
                        new_row.append(value)
                elif action[0] == "D":
                    salary_limit = list(action[1].keys())
                    salary_limit.sort()
                    for limit in salary_limit:
                        if value and value < limit:
                            new_row.append(action[1][limit])
                            break
                    else:
                        new_row.append(None)
                elif action[0] == "S":
                    new_row.append(pseudo_anonymize(value))
                elif action[0] == "A":
                    new_row.append(reduce_cc_expire_date(value))
                else:
                    new_row.append(value)
            else:
                new_row.append(value)
        anonymized_data.append(tuple(new_row))
    return anonymized_data

if __name__ == "__main__":
    main()