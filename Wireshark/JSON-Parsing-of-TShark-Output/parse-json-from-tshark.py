'''
Author      : AnyGuy
Date        : 2023-10-19

Title       : parse-json-from-tshark.py

Description : This script is designed to analyze a JSON file exported from tshark,
              specifically focusing on identifying successful TCP handshakes. 
              A successful handshake is identified by a sequence of SYN, SYN-ACK, and ACK packets.
              The script outputs the number of successful handshakes, the packet numbers,
              and the source/destination IPs and ports corresponding to each handshake sequence.
    
    - Load the JSON file containing packet data.
    - Parse through packets to identify SYN packets.
    - Check subsequent packets for SYN-ACK and ACK flags ensuring they belong to the same connection.
    - List successful handshake sequences.
'''

# Import Libraries
import json

def analyze_tcp_handshakes(json_file_path):
    # Load the JSON file
    with open(json_file_path, 'r') as f:
        packets = json.load(f)

    # Store potential handshake steps
    potential_handshakes = []

    # Identify potential handshake sequences
    for packet in packets:
        tcp_layer = packet['_source']['layers'].get('tcp', {})
        packet_number = packet['_source']['layers']['frame']['frame.number']
        flags_tree = tcp_layer.get('tcp.flags_tree', {})
        src_ip = packet['_source']['layers']['ip']['ip.src']
        dst_ip = packet['_source']['layers']['ip']['ip.dst']
        src_port = tcp_layer['tcp.srcport']
        dst_port = tcp_layer['tcp.dstport']
        connection_tuple = (src_ip, dst_ip, src_port, dst_port)

        # Check for SYN
        if flags_tree.get('tcp.flags.syn', '0') == '1' and flags_tree.get('tcp.flags.ack', '0') == '0':
            potential_handshakes.append({'type': 'SYN', 'packet_number': packet_number, 'connection': connection_tuple})
        # Check for SYN-ACK
        elif flags_tree.get('tcp.flags.syn', '0') == '1' and flags_tree.get('tcp.flags.ack', '0') == '1':
            potential_handshakes.append({'type': 'SYN-ACK', 'packet_number': packet_number, 'connection': connection_tuple})
        # Check for ACK
        elif flags_tree.get('tcp.flags.syn', '0') == '0' and flags_tree.get('tcp.flags.ack', '0') == '1':
            potential_handshakes.append({'type': 'ACK', 'packet_number': packet_number, 'connection': connection_tuple})

    # Verify and extract valid handshakes
    valid_handshakes = []
    for i, handshake_step in enumerate(potential_handshakes):
        if handshake_step['type'] == 'SYN':
            syn_packet = handshake_step
            # Look for SYN-ACK
            for j, next_step in enumerate(potential_handshakes[i+1:], start=i+1):
                if next_step['type'] == 'SYN-ACK' and next_step['connection'] == (syn_packet['connection'][1], syn_packet['connection'][0], syn_packet['connection'][3], syn_packet['connection'][2]):
                    syn_ack_packet = next_step
                    # Look for ACK
                    for k, final_step in enumerate(potential_handshakes[j+1:], start=j+1):
                        if final_step['type'] == 'ACK' and final_step['connection'] == syn_packet['connection']:
                            valid_handshakes.append({
                                'syn_packet_number': syn_packet['packet_number'],
                                'syn_ack_packet_number': syn_ack_packet['packet_number'],
                                'ack_packet_number': final_step['packet_number'],
                                'src_ip': syn_packet['connection'][0],
                                'dst_ip': syn_packet['connection'][1],
                                'src_port': syn_packet['connection'][2],
                                'dst_port': syn_packet['connection'][3]
                            })
                            break

    return valid_handshakes

# Example usage
if __name__ == "__main__":
    json_file_path = input("Please provide the path to the JSON file: ")
    valid_handshakes = analyze_tcp_handshakes(json_file_path)
    
    print("Identified TCP handshakes:\n")
    for i, handshake in enumerate(valid_handshakes):
        print(f"{i+1}. Handshake:")
        print(f"- SYN: Packet number {handshake['syn_packet_number']} (Source: {handshake['src_ip']}:{handshake['src_port']}, Destination: {handshake['dst_ip']}:{handshake['dst_port']})")
        print(f"- SYN-ACK: Packet number {handshake['syn_ack_packet_number']} (Source: {handshake['dst_ip']}:{handshake['dst_port']}, Destination: {handshake['src_ip']}:{handshake['src_port']})")
        print(f"- ACK: Packet number {handshake['ack_packet_number']} (Source: {handshake['src_ip']}:{handshake['src_port']}, Destination: {handshake['dst_ip']}:{handshake['dst_port']})")
        print("\n")
    print(f"In total, {len(valid_handshakes)} successful TCP handshakes were identified.")