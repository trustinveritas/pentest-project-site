"""
Author      : AnyGuy
Date        : 2023-09-03

Title       : ip-cidr-calculator.py

Description : This script is designed to provide a detailed breakdown of IP addresses in CIDR notation. 
              By inputting an IPv4 address with its CIDR notation (e.g., 192.168.0.0/24), users can 
              obtain a comprehensive overview of the address structure, including binary representation, 
              network and broadcast addresses, usable host range, and the total number of possible hosts. 
              This tool is particularly useful for network administrators, cybersecurity professionals, 
              and anyone needing to understand the specifics of IP address segmentation.

Dependencies:
    - prettytable: A Python library used to display tabular data in a visually appealing ASCII table format.
                   Installation: pip3 install prettytable
    - ipaddress: A built-in Python library for creating, handling, and manipulating IPv4 and IPv6 addresses and networks.

Usage:
    Run the script and provide an IPv4 address in CIDR notation when prompted.

"""

# Import Libraries
from prettytable import PrettyTable
import ipaddress

def display_ipv4_info(ip_cidr):
    ip = ipaddress.ip_network(ip_cidr, strict=False)
    hosts = list(ip.hosts())
    
    # Convert network address to string
    network_address_str = str(ip.network_address)
    
    # CIDR Notation Table
    t1 = PrettyTable()
    t1.title = f"{ip_cidr}"
    t1.field_names = ["Bit Position", "128", "64", "32", "16", "8", "4", "2", "1"]
    t1.add_row(["1", *list(map(int, format(int(ipaddress.IPv4Address(network_address_str)), '032b')[:8]))])
    t1.add_row(["2", *list(map(int, format(int(ipaddress.IPv4Address(network_address_str)), '032b')[8:16]))])
    t1.add_row(["3", *list(map(int, format(int(ipaddress.IPv4Address(network_address_str)), '032b')[16:24]))])
    t1.add_row(["4", *list(map(int, format(int(ipaddress.IPv4Address(network_address_str)), '032b')[24:]))])
    
    # Subnets Table
    t2 = PrettyTable()
    t2.title = "Subnets"
    t2.field_names = ["Subnet", "Range"]
    t2.add_row(["1st Half", f"{hosts[0]} - {hosts[len(hosts)//2 - 1]}"])
    t2.add_row(["2nd Half", f"{hosts[len(hosts)//2]} - {hosts[-1]}"])
    
    # Host Count Table
    t3 = PrettyTable()
    t3.title = "Host Information"
    t3.field_names = ["Description", "Value"]
    t3.add_row(["Total Hosts in Subnet (2^n)", len(hosts) + 2])
    t3.add_row(["Usable Hosts (2^n-2)", len(hosts)])
    t3.add_row(["Network Address", ip.network_address])
    t3.add_row(["Broadcast Address", ip.broadcast_address])

    # Display tables
    print(t1)
    print("\n")
    print(t2)
    print("\n")
    print(t3)


if __name__ == "__main__":
    user_input = input("Enter IP in CIDR notation (e.g., 172.12.0.0/16): ")
    display_ipv4_info(user_input)