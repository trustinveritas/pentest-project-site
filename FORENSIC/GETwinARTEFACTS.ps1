"""
Author      : AnyGuy
Date        : 2023-07-05

Title       : GETwinARTEFACTS.ps1

Description : Gathering evidence of activities performed on computers.
    
    - Windows Registry Forensics
    - System Information and System Accounts
    - Evidence of Execution
    - External Devices / USB Device Forensics

"""

# Main Function
function MainMenu {

    Clear-Host
    Write-Host @"

888       888 d8b               888                                  
888   o   888 Y8P               888                                  
888  d8b  888                   888                                  
888 d888b 888 888 88888b.   .d88888  .d88b.  888  888  888 .d8888b   
888d88888b888 888 888 "88b d88" 888 d88""88b 888  888  888 88K       
88888P Y88888 888 888  888 888  888 888  888 888  888  888 "Y8888b.  
8888P   Y8888 888 888  888 Y88b 888 Y88..88P Y88b 888 d88P      X88  
888P     Y888 888 888  888  "Y88888  "Y88P"   "Y8888888P"   88888P'  
                                                                     
                                                                     
                                                                     
       d8888         888             .d888                  888      
      d88888         888            d88P"                   888      
     d88P888         888            888                     888      
    d88P 888 888d888 888888 .d88b.  888888 8888b.   .d8888b 888888   
   d88P  888 888P"   888   d8P  Y8b 888       "88b d88P"    888      
  d88P   888 888     888   88888888 888   .d888888 888      888      
 d8888888888 888     Y88b. Y8b.     888   888  888 Y88b.    Y88b.    
d88P     888 888      "Y888 "Y8888  888   "Y888888  "Y8888P  "Y888   
                                                                     
                                                                     
                                                                     
 .d8888b.           888 888                   888                    
d88P  Y88b          888 888                   888                    
888    888          888 888                   888                    
888         .d88b.  888 888  .d88b.   .d8888b 888888 .d88b.  888d888 
888        d88""88b 888 888 d8P  Y8b d88P"    888   d88""88b 888P"   
888    888 888  888 888 888 88888888 888      888   888  888 888     
Y88b  d88P Y88..88P 888 888 Y8b.     Y88b.    Y88b. Y88..88P 888     
 "Y8888P"   "Y88P"  888 888  "Y8888   "Y8888P  "Y888 "Y88P"  888     

by trustinveritas
Source: https://github.com/trustinveritas
                                                                     
"@ -ForegroundColor Yellow

    Write-Host @"
             _.-;;-._
      '-..-'|   ||   |
      '-..-'|_.-;;-._|
      '-..-'|   ||   |
      '-..-'|_.-''-._|
      
"@ -ForegroundColor Red

    Write-Host ""
    Write-Host "| ------------------------------------ |"
    Write-Host "| Windows Forensic Artifact Collector: |"
    Write-Host "| ------------------------------------ |"
    Write-Host ""
    Write-Host "`nPlease choose from the following options (Numbers):"
    Write-Host "-----------------------------------------------------"
    Write-Host ""
    Write-Host "[ 1] Collect All Artifacts"
    Write-Host "[ 2] Collect Registry Artifacts"
    Write-Host "[ 3] Collect Windows Event Logs"
    Write-Host "[ 4] Collect System Information"
    Write-Host "[ 5] Collect All WiFi Data"
    Write-Host "[ 6] Collect All User Profiles and Their Settings"
    Write-Host "[ 7] Collect Windows 10 Timeline"
    Write-Host "[ 8] Collect BAM/DAM"
    Write-Host "[ 9] Collect System Resource Usage Monitor"
    Write-Host "[10] Collect Recycle Bin"
    Write-Host "[11] Exit"
    Write-Host ""
    Write-Host ""
    $UserInput = Read-Host "Choose an option: "

    # User Selection
    Switch ($UserInput) {
        1..10 {
            $OutputPath = Read-Host "Please enter the output path: "
            Switch ($UserInput) {
                1 { CollectAllArtifacts $OutputPath }
                2 { CollectRegistryArtifacts $OutputPath }
                3 { CollectEventLogs $OutputPath }
                4 { CollectSystemInfo $OutputPath }
                5 { CollectWifiData $OutputPath }
                6 { CollectUserProfiles $OutputPath }
                7 { CollectWin10Timeline $OutputPath }
                8 { CollectBAMandDAM $OutputPath }
                9 { CollectResourceUsageMonitor $OutputPath }
                10 { CollectRecycleBin $OutputPath }
            }
        }
        11 { exit }
        Default { MainMenu }
    }
}


##############
## START - Functions for Windows Forensic

# Function - Collect Registry Artifacts
function CollectRegistryArtifacts {
    param(
        [string]$OutputPath
    )

    # Collect registry artifacts here
    # This is an example. You'll need to implement the other options.
    Write-Host ""
    Write-Host "Collecting Registry Artifacts..."
    copy-item -path "HKLM:\SAM" -Destination "$OutputPath\SAM.bak" -recurse
    # ... and so on for the other registry artifacts
}

# Function - Collect Windows Event Logs
function CollectEventLogs {
    param(
        [string]$OutputPath
    )

    # Collect windows event logs here

}

# Function - Collect System Information
function CollectSystemInfo {
    param(
        [string]$OutputPath
    )

    # Make directory
    $dirPath = "$OutputPath\Information"

    if (!(Test-Path -Path $dirPath)) {
        New-Item -ItemType Directory -Path $dirPath | Out-Null
    }

    # Collect system informations here
    Write-Host ""
    Write-Host "Collecting System Informations..."
    $SystemInfoKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion"
    $ComputerName = "HKLM:\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName"
    $TimeZone = "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation"
    $NetworkInterfaces = "HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces"
    $NetworkInterfaces_2 = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Signatures\Unmanaged"
    $NetworkInterfaces_3 = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Signatures\Managed"
    $AutoStart_Once = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
    $AutoStart = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\policies\Explorer\Run"
    $AutoStart_2 = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
    $UserAutoStart_Once = "Software\Microsoft\Windows\CurrentVersion\RunOnce"
    $UserAutoStart = "Software\Microsoft\Windows\CurrentVersion\Run"
    $valueNames = "ProductName", "ReleaseId", "CurrentVersion", "CurrentBuild", "InstallDate"

    $filePath = "$dirPath\SystemInformation.log"

    # FOR loop the values and keys
    foreach ($valueName in $valueNames) {
        # Read values
        $value = (Get-ItemProperty -Path $SystemInfoKey -Name $valueName).$valueName

        # Convert InstallDate (UNIX) to dd.mm.yyyy HH:mm:ss format
        if ($valueName -eq "InstallDate") {
            $value = Get-Date -Date ([datetime]'1/1/1970').AddSeconds($value) -Format "dd.MM.yyyy HH:mm:ss"
        }

        # Show in Terminal
        Write-Host "-----------------------------------------------------"
        Write-Host ""
        Write-Host "$valueName : $value"
        
        # Write to File
        "-----------------------------------------------------" | Out-File -FilePath $filePath -Append
        "" | Out-File -FilePath $filePath -Append
        "Collecting System Informations..." | Out-File -FilePath $filePath -Append
        "-----------------------------------------------------" | Out-File -FilePath $filePath -Append
        "" | Out-File -FilePath $filePath -Append
        "$valueName : $value" | Out-File -FilePath $filePath -Append
        "" | Out-File -FilePath $filePath -Append
        "-----------------------------------------------------" | Out-File -FilePath $filePath -Append
    }

    # Collect typed paths in explorer.exe
    Write-Host ""
    Write-Host "Collecting User Typed Paths..."
    $UserTypedPath = "HKU:\"

    # Get all SUB-REG-KEYS from HKEY_USERS
    Get-ChildItem -Path $UserTypedPath | ForEach-Object {
        $userKey = $_.PSPath

        # Create Path for TypedPaths of every user
        $typedPathsPath = Join-Path -Path $userKey -ChildPath "Software\Microsoft\Windows\CurrentVersion\Explorer\TypedPaths"

        # Check if SUB-REG-KEY exist for user
        if (Test-Path -Path $typedPathsPath) {
            # Read values from Key
            $typedPaths = Get-Item -Path $typedPathsPath

            # Show Values in Terminal
            $typedPaths.GetValueNames() | ForEach-Object {
                $valueName = $_
                $value = $typedPaths.GetValue($valueName)
                Write-Host "-----------------------------------------------------"
                Write-Host ""
                Write-Host "$valueName : $value"

                # Write to File
                "" | Out-File -FilePath $filePath -Append
                "Collecting User Typed Paths..." | Out-File -FilePath $filePath -Append
                "-----------------------------------------------------" | Out-File -FilePath $filePath -Append
                "" | Out-File -FilePath $filePath -Append
                "$valueName : $value" | Out-File -FilePath $filePath -Append
                "" | Out-File -FilePath $filePath -Append
                "-----------------------------------------------------" | Out-File -FilePath $filePath -Append
            }
        }
    }
}

# Function - Collect Wi-Fi Data
function CollectWifiData {
    param(
        [string]$OutputPath
    )

    # Collect wifi data here

}

# Function - Collect User Profile Data
function CollectUserProfiles {
    param(
        [string]$OutputPath
    )

    # Collect user profile data here

}

# Function - Collect Windows 10 Timeline
function CollectWin10Timeline {
    param(
        [string]$OutputPath
    )

    # Collect windows 10 timeline here

}

# Function - Collect BAM / DAM
function CollectBAMandDAM {
    param(
        [string]$OutputPath
    )

    # Collect bam and dam here

}

# Function - Collect System Resource Usage Monitor
function CollectResourceUsageMonitor {
    param(
        [string]$OutputPath
    )

    # Collect system resource usage monitor data here

}

# Function - Collect Recycle Bin
function CollectRecycleBin {
    param(
        [string]$OutputPath
    )

    # Collect recycle bin here

}

# Function - Collect All Artifacts
function CollectAllArtifacts {
    param(
        [string]$OutputPath
    )

    # All Functions here

}

## END - Functions for Windows Forensic
##############

# Start the script with the main menu.
MainMenu
