"""
Author      : AnyGuy
Date        : 2023-06-29

Title       : monoalphabetic_frequency_analysis.py

Description : If you have a [ Monoalphabetic Substitution ] Cipher Type - It could be possible to guess the frequency of the chars.
    
    - v1.0 / AnyGuy

"""
# Import Libraries
import random
import string

# ENTER HERE YOUR CIPHER TEXT
cipher_text = "Ab .aof y.jdbc'g. urp ornkcbi Ja.oap ogxoycygycrb jcld.po ,cnn rbnf i.y frg or uap x.jago. ru lgbjygaycrb ofmxrnov  Oycnnw cy odrgne i.y frg jnro. .brgid yr ucigp. rgy yd. p.oyv  Xgy jab frg ucigp. rgy yd. t.f ,dcjd dall.bo yr x. yd. bam. ru yd. _nafrgy_ ,dcjd jp.ay.e ydcov Ajygannfw frg dae x.yy.p .by.p cy ydcov hgoy yr x. oau. (ann nr,.p[jao. cu frg ln.ao.)v"

# Simplified scoring function, counts how many 3-letter words are in a dictionary
def score(text):
    words = ['the', 'and', 'for', 'are', 'but', 'not', 'you', 'all', 'any', 'her', 'his', 'out', 'use', 'was', 'who', 'how', 'its', 'our', 'old', 'No', 'be', 'set']
    score = 0
    for word in words:
        if word in text:
            score += 1
    return score

# Initial random key
key = list(string.ascii_lowercase)
random.shuffle(key)
key = ''.join(key)

# Best key and score
best_key = key
best_score = -1

# Hill climbing algorithm
for i in range(10000):  # Increase the range for more iterations
    # Swap two random positions in the key
    x = random.randint(0, len(key) - 1)
    y = random.randint(0, len(key) - 1)
    key = list(key)
    key[x], key[y] = key[y], key[x]
    key = ''.join(key)

    # Calculate score
    table = str.maketrans(string.ascii_lowercase, key)
    text = cipher_text.translate(table)
    score_value = score(text)

    # Check if this key is better
    if score_value > best_score:
        best_score = score_value
        best_key = key
    else:
        # If not, undo the swap
        key = list(key)
        key[x], key[y] = key[y], key[x]
        key = ''.join(key)

print('Best key:', best_key)
print('Best score:', best_score)

# Use the best key to decrypt the text
table = str.maketrans(string.ascii_lowercase, best_key)
decrypted_text = cipher_text.translate(table)
print('Decrypted text:', decrypted_text)

frequency = {}
for char in cipher_text:
    if char.isalpha():
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
sorted_frequency = sorted(frequency.items(), key=lambda item: item[1], reverse=True)

# Store Chars frequency in a list
frequency_list = list(sorted_frequency)

# Print it out
print(sorted_frequency)